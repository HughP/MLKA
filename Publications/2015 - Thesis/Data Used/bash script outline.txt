!#/bin/bash

#This is a bash script to automate the transformation of corpora

#Requires these dependencies
# 1. UnicodeCCount
# 2. TECKit
# 3. Typing by Michael Dickens
# 4. Stave Python script for Cleaning Wikipedia
# 5. Stave Python script for counting digrams
# 6.


ls *.txt > text-list.txt

1. Collect texts from source.
	a. Create date, time, source, and permissions metadata.
	b. Create stated copy of text for reference.
		i. give each text a consistent first part in the name and a varied middle part and a consistent last part. (i.e. ori-James-NAV-text.txt)
	
2. Collect keyboard layout files from source.
	a. Create date, time, source metadata.
	b. Create image based on Apple keyboard template.
	c. Create image based on heatmap template.
	d. Write keyboard layout description
		i. List all characters which are enabled by the keyboard layout in Unicode NFD.
			(1) Create list.
			(2) Convert list to NFD.

3. For each corpus get initial corpus counts
	a. Run UnicodeCCount with the following flags and output them to a single new folder in the following ways:
		i. -d
			(1) as a .txt file (using '> CorpusName_InitialCount-d.txt')
			(2) as a .md file where 'tab' is replaced with "|" and "'" is escaped with "\"; at the top of the .md file add "## File name" in good typography (use spaces and sentence case).
		ii. -u
		iii. -d -m
		iv. -c
		v. Create an additional concatenated version of the .md files; to top of concatenation add "#Initial Corpus Counts"
	b. List all characters used.
		i.List all characters used which are not enabled via the keyboard layout for the language of the text (compare lists: 2.d.1.(2) with 3.a.iii).	

4. Clean texts
	a. Remove SFM Markers
		i. Remove Verse #
		ii. Remove Chapter #
		iii. Remove Section headings #
		iv. Create stated copy of text for reference.	
	b. Remove typesetting characters via TECkit
		i. List characters to be removed. Example U+00A0 needs to be converted to U+0020.
		ii. Create .map file
			(1) Create
			(2) Compile .tec
			(3) Apply
			(4) Save .map and .tec files 
		iii. Create stated copy of text for reference.	

5. Get second set of corpus counts
	a. Run UnicodeCCount on the stated copy of (4.b.iii) with the following flags and output them to a single new folder in the following ways:
		i. -d
			(1) as a .txt file (using '> CorpusName_SecondCount-d.txt')
			(2) as a .md file where 'tab' is replaced with "|" and "'" is escaped with "\"; at the top of the .md file add "## File name" in good typography (use spaces and sentence case).
		ii. -u
		iii. -d -m
		iv. -c
		v. Create an additional concatenated version of the .md files; to top of concatenation add "#Second Corpus Counts"
		vi. Create an alined data presentation for -u of (3.a.ii) and (5.a.ii). Print this to .md format (per 3.a.ii).
	b. List all characters used.
		i.List all characters used which are not enabled via the keyboard layout for the language of the text. __(check this for what it is being compared to)__

6. Convert texts to NFD
	a. Convert texts to NFD.
		i. UinicodeCCount -m and compare, show diffs
	d. Remove untypeable characters
		i. UinicodeCCount -m and compare; show diffs

7. Count words of text.
		
8. Convert texts to ASCII
	a. Use .map file to convert texts to ASCII

9. Use python to count digrams.

10. Use javascript to count distance.	
			

