; Author: Created by Hugh Paterson III 21. May 2015 (c) Hugh Paterson III
; License: This document is dual licensed under both: GPL and/or Creative Commons-with Attribution-Share alike (CC-BY-SA). Choose the license which fits your situation best and enjoy the freedoms that that license grants. Both licenses do not apply at the same time.
; Description: TECkit mapping file generated by hand. The purpose is to take a text in a language which uses a given keyboard and turn that text in to ASCII characters which match the QWERTY layout. The script is designed to read NFD Unicode text which have been produced with either the Nigeria dot keyboard or the Nigeria underline keyboards. This may mean that texts need to be first converted to NFD (for which there is a sister script to this one). Then this script will spit out a Unicode file with all character values being within the ASCII range. Not all possible combinations of multiple diacritics and base characters are accounted for. I only accounted for instances which are attested in the data I was working with at the time. A check for characters not caught with this script can be performed using UnicodeCCount and -m and looking for any remaining diacritics. Also note that this script is not actually reversable for two reasons: there are multible contributing keyboards so several characters become < 'a >.

EncodingName            "Unicode-NAV_on_NAV-for-counting-2015_1"
DescriptiveName         "It was necessary to convert some Unicode characters to other unicode characters for the purpose of counting distinct phonemes"
Version                 "0.1"
Contact                 "mailto:hugh_paterson@sil.org"
RegistrationAuthority   "Hugh Personal"
RegistrationName        "PatersonThesis2015"

;*** Replace "(REG_ID)" with "SIL" or other organization identifier
;*** Replace "(REG_NAME)" with "SIL International" or other organization name
;*** Replace "(VERSION)" with year the encoding was introduced
;*** Replace "(YOUR_ADDRESS_HERE)" with your email address
;*** Replace font name with other encoding identifier if appropriate

;set normalization flags only if you are sure they are appropriate
LHSFlags		( ExpectsNFC GeneratesNFD ) ;SourceFlags
RHSFlags		( ) ;TargetFlags

pass( NFD )

;UniClass  [CTL] = ( U+0000 .. U+001f )
;[CTL]	<>	[CTL]

; The purpose here was to create a file in NFC

; Compensate for Whitespace Characters
; U+00A0 <> U+0020	 	; no_break_space --> Breaking Space